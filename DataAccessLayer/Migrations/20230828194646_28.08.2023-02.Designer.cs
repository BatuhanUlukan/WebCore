// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230828194646_28.08.2023-02")]
    partial class _2808202302
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntitiyLayer.Concrete.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AboutStatus")
                        .HasColumnType("bit");

                    b.Property<string>("AboutSubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleCategoryCount")
                        .HasColumnType("int");

                    b.Property<string>("ArticleContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleMaınImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArticlePublıshDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ArticleStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ArticleTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArticleViewCount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthorNumber")
                        .HasColumnType("int");

                    b.Property<string>("AuthorPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AuthorStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SocialId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SocialId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CategoryStatus")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ClientStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ClientTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CommentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CommentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMapsLınk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMaıl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContactStatus")
                        .HasColumnType("bit");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.ContactMessage", b =>
                {
                    b.Property<int>("ContactMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactMessageContect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContactMessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactMessageMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContactMessageStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ContactMessageSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMessageUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactMessageId");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Fact", b =>
                {
                    b.Property<int>("FactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FactCount")
                        .HasColumnType("int");

                    b.Property<string>("FactIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FactStatus")
                        .HasColumnType("bit");

                    b.Property<string>("FactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FactId");

                    b.ToTable("Facts");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioLınk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioMaınImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PortfolioPublıshDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PortfolioStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PortfolioTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioViewCount")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ServiceStatus")
                        .HasColumnType("bit");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Social", b =>
                {
                    b.Property<int>("SocialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SocialIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SocialStatus")
                        .HasColumnType("bit");

                    b.HasKey("SocialId");

                    b.ToTable("Socials");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TagStatus")
                        .HasColumnType("bit");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Testimonial", b =>
                {
                    b.Property<int>("TestimonialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TestimonialContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestimonialImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestimonialRefrer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TestimonialStatus")
                        .HasColumnType("bit");

                    b.HasKey("TestimonialId");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Article", b =>
                {
                    b.HasOne("EntitiyLayer.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiyLayer.Concrete.Tag", "Tag")
                        .WithMany("Articles")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Author", b =>
                {
                    b.HasOne("EntitiyLayer.Concrete.Service", "Service")
                        .WithMany("Authors")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiyLayer.Concrete.Social", "Social")
                        .WithMany("Authors")
                        .HasForeignKey("SocialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Social");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Comment", b =>
                {
                    b.HasOne("EntitiyLayer.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Portfolio", b =>
                {
                    b.HasOne("EntitiyLayer.Concrete.Category", "Category")
                        .WithMany("Portfolios")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntitiyLayer.Concrete.Tag", "Tag")
                        .WithMany("Portfolios")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Service", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Social", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("EntitiyLayer.Concrete.Tag", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Portfolios");
                });
#pragma warning restore 612, 618
        }
    }
}
